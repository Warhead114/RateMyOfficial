import { drizzle } from 'drizzle-orm/neon-serverless';
import { eq, and, or, like, desc, sql } from 'drizzle-orm';
import { pool } from './db';
import * as schema from '@shared/schema';
import type { 
  Official, InsertOfficial, 
  Review, InsertReview, 
  Event, InsertEvent, 
  EventOfficial, EventTeam, 
  User, InsertUser, 
  Team, InsertTeam 
} from "@shared/schema";
import bcrypt from "bcryptjs";

export interface SearchFilters {
  startDate?: Date;
  endDate?: Date;
  eventType?: string;
  venue?: string;
  host?: string;
}

interface CategoryAverages {
  mechanics: number;
  professionalism: number;
  positioning: number;
  stalling: number;
  consistency: number;
  appearance: number;
  overall: number;
}

export interface IStorage {
  // Officials
  getOfficials(): Promise<Official[]>;
  getOfficialById(id: number): Promise<Official | undefined>;
  searchOfficials(query: string): Promise<Official[]>;
  createOfficial(official: InsertOfficial & { photoUrl?: string }): Promise<Official>;
  updateOfficialRating(id: number): Promise<void>;
  updateOfficial(id: number, official: Partial<InsertOfficial>): Promise<Official>;
  deleteOfficial(id: number): Promise<void>;
  refreshAllOfficialRatings(): Promise<void>; // New method to refresh all officials' ratings

  // Events
  getEvents(): Promise<Event[]>;
  getEventById(id: number): Promise<Event | undefined>;
  searchEvents(query: string, filters?: SearchFilters): Promise<Event[]>;
  createEvent(event: InsertEvent): Promise<Event>;
  updateEvent(id: number, event: InsertEvent): Promise<Event>;
  getEventOfficials(eventId: number): Promise<Official[]>;
  deleteEvent(id: number): Promise<void>;

  // Reviews
  getReviewsForOfficial(officialId: number): Promise<Review[]>;
  createReview(review: InsertReview & { userId: number }): Promise<Review>;
  reportReview(id: number): Promise<void>;

  // User methods
  getUserByEmail(email: string): Promise<User | undefined>;
  getUserById(id: number): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  verifyUser(token: string): Promise<boolean>;
  updateVerificationToken(userId: number, token: string | null, expires: Date | null): Promise<void>;
  getPendingUsers(): Promise<User[]>;
  getAllCoaches(): Promise<User[]>; // Get all verified coaches for admin
  getCoachesByRegion(region: string): Promise<User[]>; // Get coaches filtered by region for supervisors
  deleteUser(userId: number): Promise<void>;

  // Add this new method
  getEventsForOfficial(officialId: number): Promise<Event[]>;
  updateUserProfile(userId: number, updates: Partial<User>): Promise<User>;
  
  // Teams
  getTeams(): Promise<Team[]>;
  getTeamById(id: number): Promise<Team | undefined>;
  createTeam(team: InsertTeam): Promise<Team>;
  getEventTeams(eventId: number): Promise<Team[]>;
}

export class DatabaseStorage implements IStorage {
  private db;

  constructor() {
    this.db = drizzle({ client: pool, schema });
  }

  async getOfficials(): Promise<Official[]> {
    return await this.db.select().from(schema.officials);
  }

  async getOfficialById(id: number): Promise<Official | undefined> {
    const [official] = await this.db
      .select()
      .from(schema.officials)
      .where(eq(schema.officials.id, id));
    return official;
  }

  async searchOfficials(query: string): Promise<Official[]> {
    const searchTerm = `%${query}%`;
    return await this.db
      .select()
      .from(schema.officials)
      .where(
        or(
          like(schema.officials.firstName, searchTerm),
          like(schema.officials.lastName, searchTerm),
          like(schema.officials.location, searchTerm)
        )
      );
  }

  async createOfficial(official: InsertOfficial & { photoUrl?: string }): Promise<Official> {
    const [newOfficial] = await this.db
      .insert(schema.officials)
      .values({
        firstName: official.firstName,
        lastName: official.lastName,
        age: official.age,
        location: official.location,
        association: official.association,
        yearsExperience: official.yearsExperience,
        photoUrl: official.photoUrl ? `/${official.photoUrl}` : null,
        averageRating: 0,
        totalReviews: 0
      })
      .returning();
    return newOfficial;
  }

  private async calculateCategoryAverages(officialId: number): Promise<CategoryAverages> {
    const reviews = await this.getReviewsForOfficial(officialId);

    if (reviews.length === 0) {
      return {
        mechanics: 0,
        professionalism: 0,
        positioning: 0,
        stalling: 0,
        consistency: 0,
        appearance: 0,
        overall: 0
      };
    }

    const sums = reviews.reduce((acc, review) => ({
      mechanics: acc.mechanics + review.mechanics,
      professionalism: acc.professionalism + review.professionalism,
      positioning: acc.positioning + review.positioning,
      stalling: acc.stalling + review.stalling,
      consistency: acc.consistency + review.consistency,
      appearance: acc.appearance + review.appearance
    }), {
      mechanics: 0,
      professionalism: 0,
      positioning: 0,
      stalling: 0,
      consistency: 0,
      appearance: 0
    });

    const count = reviews.length;
    const averages = {
      mechanics: Math.round(sums.mechanics / count),
      professionalism: Math.round(sums.professionalism / count),
      positioning: Math.round(sums.positioning / count),
      stalling: Math.round(sums.stalling / count),
      consistency: Math.round(sums.consistency / count),
      appearance: Math.round(sums.appearance / count)
    };

    const overall = Math.round(
      (averages.mechanics +
        averages.professionalism +
        averages.positioning +
        averages.stalling +
        averages.consistency +
        averages.appearance) / 6
    );

    return { ...averages, overall };
  }

  async updateOfficialRating(id: number): Promise<void> {
    const averages = await this.calculateCategoryAverages(id);
    const reviews = await this.getReviewsForOfficial(id);

    await this.db
      .update(schema.officials)
      .set({
        averageRating: averages.overall,
        totalReviews: reviews.length
      })
      .where(eq(schema.officials.id, id));
  }

  async updateOfficial(id: number, officialData: Partial<InsertOfficial>): Promise<Official> {
    const [updated] = await this.db
      .update(schema.officials)
      .set(officialData)
      .where(eq(schema.officials.id, id))
      .returning();
    return updated;
  }

  async deleteOfficial(id: number): Promise<void> {
    // First delete related event_officials records
    await this.db
      .delete(schema.eventOfficials)
      .where(eq(schema.eventOfficials.officialId, id));

    // Then delete related reviews
    await this.db
      .delete(schema.reviews)
      .where(eq(schema.reviews.officialId, id));

    // Finally delete the official
    await this.db
      .delete(schema.officials)
      .where(eq(schema.officials.id, id));
  }

  async getEvents(): Promise<Event[]> {
    return await this.db.select().from(schema.events);
  }

  async getEventById(id: number): Promise<Event | undefined> {
    const [event] = await this.db
      .select()
      .from(schema.events)
      .where(eq(schema.events.id, id));
    return event;
  }

  async searchEvents(query: string, filters?: SearchFilters): Promise<Event[]> {
    const searchTerm = `%${query}%`;
    return await this.db
      .select()
      .from(schema.events)
      .where(
        or(
          like(schema.events.name, searchTerm),
          like(schema.events.venue, searchTerm),
          like(schema.events.description || '', searchTerm),
          like(schema.events.host, searchTerm)
        )
      );
  }

  async createEvent(event: InsertEvent): Promise<Event> {
    // Start a transaction to ensure both event and official assignments are created
    return await this.db.transaction(async (tx) => {
      // First create the event
      const [newEvent] = await tx
        .insert(schema.events)
        .values({
          name: event.name,
          date: new Date(event.date),
          venue: event.venue,
          description: event.description,
          eventType: event.eventType,
          host: event.host
        })
        .returning();

      console.log('Created event:', newEvent);

      // Then create event-official relationships
      if (event.officials && event.officials.length > 0) {
        for (const official of event.officials) {
          await tx
            .insert(schema.eventOfficials)
            .values({
              eventId: newEvent.id,
              officialId: official.officialId,
              role: official.role || null
            });
        }
      }

      console.log('Added officials to event');
      return newEvent;
    });
  }

  async updateEvent(id: number, event: InsertEvent): Promise<Event> {
    return await this.db.transaction(async (tx) => {
      // Update the event details
      const [updatedEvent] = await tx
        .update(schema.events)
        .set({
          name: event.name,
          date: new Date(event.date),
          venue: event.venue,
          description: event.description,
          eventType: event.eventType,
          host: event.host
        })
        .where(eq(schema.events.id, id))
        .returning();

      if (!updatedEvent) {
        throw new Error('Event not found');
      }

      // Delete existing official assignments
      await tx
        .delete(schema.eventOfficials)
        .where(eq(schema.eventOfficials.eventId, id));

      // Create new official assignments
      if (event.officials && event.officials.length > 0) {
        for (const official of event.officials) {
          await tx
            .insert(schema.eventOfficials)
            .values({
              eventId: updatedEvent.id,
              officialId: official.officialId,
              role: official.role || null
            });
        }
      }

      return updatedEvent;
    });
  }

  async getEventOfficials(eventId: number): Promise<Official[]> {
    return await this.db
      .select({
        id: schema.officials.id,
        firstName: schema.officials.firstName,
        lastName: schema.officials.lastName,
        age: schema.officials.age,
        location: schema.officials.location,
        association: schema.officials.association,
        yearsExperience: schema.officials.yearsExperience,
        photoUrl: schema.officials.photoUrl,
        averageRating: schema.officials.averageRating,
        totalReviews: schema.officials.totalReviews
      })
      .from(schema.eventOfficials)
      .innerJoin(
        schema.officials,
        eq(schema.eventOfficials.officialId, schema.officials.id)
      )
      .where(eq(schema.eventOfficials.eventId, eventId));
  }

  async getReviewsForOfficial(officialId: number): Promise<Review[]> {
    return await this.db
      .select({
        id: schema.reviews.id,
        officialId: schema.reviews.officialId,
        userId: schema.reviews.userId,
        eventId: schema.reviews.eventId,
        mechanics: schema.reviews.mechanics,
        professionalism: schema.reviews.professionalism,
        positioning: schema.reviews.positioning,
        stalling: schema.reviews.stalling,
        consistency: schema.reviews.consistency,
        appearance: schema.reviews.appearance,
        comment: schema.reviews.comment,
        date: schema.reviews.date,
        isReported: schema.reviews.isReported,
        user: {
          firstName: schema.users.firstName,
          lastName: schema.users.lastName,
          userType: schema.users.userType,
          photoUrl: schema.users.photoUrl
        },
        event: {
          name: schema.events.name,
          date: schema.events.date
        }
      })
      .from(schema.reviews)
      .innerJoin(
        schema.users,
        eq(schema.reviews.userId, schema.users.id)
      )
      .innerJoin(
        schema.events,
        eq(schema.reviews.eventId, schema.events.id)
      )
      .where(eq(schema.reviews.officialId, officialId))
      .orderBy(desc(schema.reviews.date));
  }

  async createReview(review: InsertReview & { userId: number }): Promise<Review> {
    // Check if user has already reviewed this official for this event
    const existingReview = await this.db
      .select()
      .from(schema.reviews)
      .where(
        and(
          eq(schema.reviews.userId, review.userId),
          eq(schema.reviews.officialId, review.officialId),
          eq(schema.reviews.eventId, review.eventId)
        )
      );

    if (existingReview.length > 0) {
      throw new Error("You have already reviewed this official for this event");
    }

    // Check if official was assigned to this event
    const officialEvent = await this.db
      .select()
      .from(schema.eventOfficials)
      .where(
        and(
          eq(schema.eventOfficials.officialId, review.officialId),
          eq(schema.eventOfficials.eventId, review.eventId)
        )
      );

    if (officialEvent.length === 0) {
      throw new Error("This official was not assigned to this event");
    }

    const [newReview] = await this.db
      .insert(schema.reviews)
      .values({
        ...review,
        comment: review.comment || "",
        date: new Date(),
        isReported: false
      })
      .returning();

    // Update official's ratings
    await this.updateOfficialRating(review.officialId);

    // Return the review with user and event information
    const [reviewWithDetails] = await this.db
      .select({
        id: schema.reviews.id,
        officialId: schema.reviews.officialId,
        userId: schema.reviews.userId,
        eventId: schema.reviews.eventId,
        mechanics: schema.reviews.mechanics,
        professionalism: schema.reviews.professionalism,
        positioning: schema.reviews.positioning,
        stalling: schema.reviews.stalling,
        consistency: schema.reviews.consistency,
        appearance: schema.reviews.appearance,
        comment: schema.reviews.comment,
        date: schema.reviews.date,
        isReported: schema.reviews.isReported,
        user: {
          firstName: schema.users.firstName,
          lastName: schema.users.lastName,
          userType: schema.users.userType,
          photoUrl: schema.users.photoUrl
        },
        event: {
          name: schema.events.name,
          date: schema.events.date
        }
      })
      .from(schema.reviews)
      .innerJoin(
        schema.users,
        eq(schema.reviews.userId, schema.users.id)
      )
      .innerJoin(
        schema.events,
        eq(schema.reviews.eventId, schema.events.id)
      )
      .where(eq(schema.reviews.id, newReview.id));

    return reviewWithDetails;
  }

  async reportReview(id: number): Promise<void> {
    await this.db
      .update(schema.reviews)
      .set({ isReported: true })
      .where(eq(schema.reviews.id, id));
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    const [user] = await this.db
      .select()
      .from(schema.users)
      .where(eq(schema.users.email, email.toLowerCase()));
    return user;
  }

  async getUserById(id: number): Promise<User | undefined> {
    const [user] = await this.db
      .select()
      .from(schema.users)
      .where(eq(schema.users.id, id));
    return user;
  }

  async createUser(userData: InsertUser): Promise<User> {
    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const [user] = await this.db
      .insert(schema.users)
      .values({
        ...userData,
        password: hashedPassword,
        role: 'user',
        isVerified: false,
        verificationToken: null,
        verificationExpires: null,
        createdAt: new Date()
      })
      .returning();
    return user;
  }

  async verifyUser(token: string): Promise<boolean> {
    const [user] = await this.db
      .select()
      .from(schema.users)
      .where(
        and(
          eq(schema.users.verificationToken, token),
          eq(schema.users.isVerified, false)
        )
      );

    if (user && user.verificationExpires && user.verificationExpires > new Date()) {
      await this.db
        .update(schema.users)
        .set({
          isVerified: true,
          verificationToken: null,
          verificationExpires: null
        })
        .where(eq(schema.users.id, user.id));
      return true;
    }

    return false;
  }

  async updateVerificationToken(userId: number, token: string | null, expires: Date | null): Promise<void> {
    await this.db
      .update(schema.users)
      .set({
        verificationToken: token,
        verificationExpires: expires
      })
      .where(eq(schema.users.id, userId));
  }

  async getPendingUsers(): Promise<User[]> {
    return await this.db
      .select()
      .from(schema.users)
      .where(
        eq(schema.users.isVerified, false)
      );
  }

  async getAllCoaches(): Promise<User[]> {
    return await this.db
      .select()
      .from(schema.users)
      .where(
        and(
          eq(schema.users.userType, "Coach"),
          eq(schema.users.isVerified, true)
        )
      );
  }
  
  async getCoachesByRegion(region: string): Promise<User[]> {
    return await this.db
      .select()
      .from(schema.users)
      .where(
        and(
          eq(schema.users.userType, "Coach"),
          eq(schema.users.isVerified, true),
          eq(schema.users.region, region)
        )
      );
  }

  async deleteUser(userId: number): Promise<void> {
    console.log(`Deleting user ID ${userId}`);

    // Start a transaction
    await this.db.transaction(async (tx) => {
      // First find all officials who were reviewed by this user to update their ratings later
      const affectedReviews = await tx
        .select({
          officialId: schema.reviews.officialId
        })
        .from(schema.reviews)
        .where(eq(schema.reviews.userId, userId));

      // Get unique official IDs
      const officialIdMap: Record<number, boolean> = {};
      const affectedOfficialIds: number[] = [];
      
      for (const review of affectedReviews) {
        if (!officialIdMap[review.officialId]) {
          officialIdMap[review.officialId] = true;
          affectedOfficialIds.push(review.officialId);
        }
      }
      
      console.log(`Found ${affectedOfficialIds.length} officials affected by user deletion`);

      // Delete all reviews made by this user
      await tx
        .delete(schema.reviews)
        .where(eq(schema.reviews.userId, userId));

      // Delete the user
      await tx
        .delete(schema.users)
        .where(eq(schema.users.id, userId));
    });
    
    // After the transaction is complete, refresh all officials' ratings
    // This ensures everything is in sync and no cached data is used
    console.log("Refreshing all official ratings after user deletion");
    await this.refreshAllOfficialRatings();
  }

  async getEventsForOfficial(officialId: number): Promise<Event[]> {
    return await this.db
      .select({
        id: schema.events.id,
        name: schema.events.name,
        date: schema.events.date,
        venue: schema.events.venue,
        description: schema.events.description,
        eventType: schema.events.eventType,
        host: schema.events.host,
      })
      .from(schema.eventOfficials)
      .innerJoin(
        schema.events,
        eq(schema.eventOfficials.eventId, schema.events.id)
      )
      .where(eq(schema.eventOfficials.officialId, officialId))
      .orderBy(desc(schema.events.date));
  }

  async deleteEvent(id: number): Promise<void> {
    console.log(`Deleting event ID ${id}`);
    
    // Start a transaction
    await this.db.transaction(async (tx) => {
      // First find all officials who have reviews for this event to update their ratings later
      const affectedReviews = await tx
        .select({
          officialId: schema.reviews.officialId
        })
        .from(schema.reviews)
        .where(eq(schema.reviews.eventId, id));

      // Get unique official IDs
      const officialIdMap: Record<number, boolean> = {};
      const affectedOfficialIds: number[] = [];
      
      for (const review of affectedReviews) {
        if (!officialIdMap[review.officialId]) {
          officialIdMap[review.officialId] = true;
          affectedOfficialIds.push(review.officialId);
        }
      }
      
      console.log(`Found ${affectedOfficialIds.length} officials affected by event deletion`);

      // Delete related reviews
      await tx
        .delete(schema.reviews)
        .where(eq(schema.reviews.eventId, id));

      // Delete related event_officials records
      await tx
        .delete(schema.eventOfficials)
        .where(eq(schema.eventOfficials.eventId, id));

      // Delete the event
      await tx
        .delete(schema.events)
        .where(eq(schema.events.id, id));
    });
    
    // After the transaction is complete, refresh all officials' ratings
    // This ensures everything is in sync and no cached data is used
    console.log("Refreshing all official ratings after event deletion");
    await this.refreshAllOfficialRatings();
  }

  async updateUserProfile(userId: number, updates: Partial<User>): Promise<User> {
    console.log('Starting profile update transaction for userId:', userId);
    console.log('Update payload:', updates);

    try {
      // Start a transaction
      return await this.db.transaction(async (tx) => {
        // First verify the user exists
        const [existingUser] = await tx
          .select()
          .from(schema.users)
          .where(eq(schema.users.id, userId));

        if (!existingUser) {
          throw new Error(`User not found with ID ${userId}`);
        }

        console.log('Found existing user:', existingUser);

        // Prepare updates with proper type conversion
        const parsedUpdates = {
          firstName: updates.firstName,
          lastName: updates.lastName,
          email: updates.email,
          school: updates.school,
          yearsCoaching: updates.yearsCoaching !== undefined
            ? Number(updates.yearsCoaching)
            : undefined,
          region: updates.region,
          yearsExperience: updates.yearsExperience !== undefined
            ? Number(updates.yearsExperience)
            : undefined,
          photoUrl: updates.photoUrl
        };

        console.log('Parsed updates:', parsedUpdates);

        // Perform the update within the transaction
        const [updatedUser] = await tx
          .update(schema.users)
          .set(parsedUpdates)
          .where(eq(schema.users.id, userId))
          .returning();

        if (!updatedUser) {
          throw new Error('Failed to update user profile');
        }

        console.log('Successfully updated user:', updatedUser);
        return updatedUser;
      });
    } catch (error) {
      console.error('Transaction failed:', error);
      throw error;
    }
  }

  async refreshAllOfficialRatings(): Promise<void> {
    console.log('Starting refresh of all official ratings');
    
    try {
      // Get all officials
      const officials = await this.db.select().from(schema.officials);
      console.log(`Found ${officials.length} officials to update`);
      
      // For each official, recalculate their ratings
      for (const official of officials) {
        try {
          console.log(`Refreshing ratings for official ID ${official.id} (${official.firstName} ${official.lastName})`);
          
          // Get valid reviews (with existing users and events)
          const reviews = await this.getReviewsForOfficial(official.id);
          console.log(`Found ${reviews.length} valid reviews for official ID ${official.id}`);
          
          // Calculate category averages
          const averages = await this.calculateCategoryAverages(official.id);
          
          // Update the official's rating and total reviews count
          await this.db
            .update(schema.officials)
            .set({
              averageRating: averages.overall,
              totalReviews: reviews.length
            })
            .where(eq(schema.officials.id, official.id));
            
          console.log(`Successfully updated ratings for official ID ${official.id}: avgRating=${averages.overall}, totalReviews=${reviews.length}`);
        } catch (err) {
          console.error(`Error updating official ID ${official.id}:`, err);
          // Continue with next official even if there's an error
        }
      }
      
      console.log('Completed refresh of all official ratings');
    } catch (error) {
      console.error('Error refreshing all official ratings:', error);
      throw error;
    }
  }
}

  // Team methods implementation
  async getTeams(): Promise<Team[]> {
    return await this.db.select().from(schema.teams);
  }

  async getTeamById(id: number): Promise<Team | undefined> {
    const [team] = await this.db
      .select()
      .from(schema.teams)
      .where(eq(schema.teams.id, id));
    return team;
  }

  async createTeam(team: InsertTeam): Promise<Team> {
    try {
      // Check if team name already exists
      const existingTeam = await this.db
        .select()
        .from(schema.teams)
        .where(eq(schema.teams.name, team.name));
      
      if (existingTeam.length > 0) {
        // Return the existing team if it already exists
        return existingTeam[0];
      }
      
      // Create a new team
      const [newTeam] = await this.db
        .insert(schema.teams)
        .values({
          name: team.name,
          createdAt: new Date(),
        })
        .returning();
      
      return newTeam;
    } catch (error) {
      console.error("Error creating team:", error);
      throw error;
    }
  }

  async getEventTeams(eventId: number): Promise<Team[]> {
    return await this.db
      .select({
        id: schema.teams.id,
        name: schema.teams.name,
        createdAt: schema.teams.createdAt
      })
      .from(schema.eventTeams)
      .innerJoin(
        schema.teams,
        eq(schema.eventTeams.teamId, schema.teams.id)
      )
      .where(eq(schema.eventTeams.eventId, eventId));
  }
}

export const storage = new DatabaseStorage();